package bjoon;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.StringTokenizer;

public class bjoon_11062 {

	public static void main(String[] args) throws NumberFormatException, IOException {
		System.setIn(new FileInputStream("res/11062.txt"));
		HashMap<String, Integer> pwd = new HashMap<>();
		pwd.put("0001101", 0);
		pwd.put("0011001", 1);
		pwd.put("0010011", 2);
		pwd.put("0111101", 3);
		pwd.put("0100011", 4);
		pwd.put("0110001", 5);
		pwd.put("0101111", 6);
		pwd.put("0111011", 7);
		pwd.put("0110111", 8);
		pwd.put("0001011", 9);
		
		StringBuilder sb;
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		
		int T = Integer.parseInt(br.readLine());
		String[] str;
	
		
		for(int t = 1; t <= T; t++) {
			sb = new StringBuilder();
			st = new StringTokenizer (br.readLine());
			int N = Integer.parseInt(st.nextToken());
			int M = Integer.parseInt(st.nextToken());
			int cnt = 0;
			str = new String[N];
			
			String[] substr = new String[N];
			int [] subnum = new int[N];
			for(int i = 0; i < N; i++) {
				str[i] = br.readLine();
			}
			
			for(int i = 0; i < N-4; i++) {
				for(int j = M-1; j >= 55; j--) {
					if(str[i].charAt(j) - '0' == 1) {
						substr[cnt] = str[i];
						subnum[cnt] = j;
						for(int k = i+5; k <= N; k++) {
							if(!substr[cnt].equals(str[k])) {
								i = k-1;
								break;
							}
						}
						cnt++;
						break;
					}
				}
			}
			
			int[][] pNum = new int[cnt][8];
			String pwdstr;
			int pwdcnt = 0;
			
			for(int i = 0; i < cnt; i++) {
				int subcnt = subnum[i] - 55;
				for(int j = subcnt; j < subcnt + 56; j++) {
					pwdstr = substr[i].substring(j, j+7);
					if(!pwd.containsKey(pwdstr)){
						break;
					}
					pNum[i][pwdcnt++] = pwd.get(pwdstr);
					j += 6;
				}
			}

			int odd, even, sum = 0;
			
			for(int i = 0; i < cnt; i++) {
				odd = pNum[i][0]+pNum[i][2]+pNum[i][4]+pNum[i][6];
				even = pNum[i][1] + pNum[i][3] + pNum[i][5] + pNum[i][7];
				if((odd*3 + even)%10 == 0) {
					sum = odd + even;
				}
			}
			
			sb.append("#");
			sb.append(t);
			sb.append(" ");
			sb.append(sum);
			System.out.println(sb.toString());
			
			
		}
		
		
	}

}
