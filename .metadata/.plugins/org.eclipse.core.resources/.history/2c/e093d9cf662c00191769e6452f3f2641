package binary_parametric;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class bjoon_1654 {

	static int K;
	static int N;
	static long[] lan;
	static long res;

	public static void main(String[] args) throws IOException {

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());

		K = Integer.parseInt(st.nextToken());
		N = Integer.parseInt(st.nextToken());
		
		lan = new long[K];
		
		for (int i = 0; i < K; i++) {
			lan[i] = Integer.parseInt(br.readLine());
		}
		Arrays.sort(lan);

		curlen(0, lan[K-1] * 2 / (N/K));

		System.out.println(res);
	}

	public static void curlen(long left, long right) {
		long mid = 0, lanNum;

		if (left < right - 1) {

			mid = (left + right) / 2;
			lanNum = 0;
			for (int i = 0; i < K; i++) {
				lanNum += lan[i] / mid;
				if(lanNum >= N) {
					break;
				}
			}
			if (lanNum < N) {
				curlen(left, mid);
				return;
			}
			if (lanNum > N) {
				curlen(mid, right);
				return;
			}
		}
		while (mid < right) {
			lanNum = 0;
			mid++;
			for (int i = 0; i < K; i++) {
				lanNum += lan[i] / mid;
			}
			if (lanNum < N) {
				mid--;
				break;
			}
		}
		res = mid;

	}

}
